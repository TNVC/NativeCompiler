#define RAX 0x0
#define RCX 0x1
#define RDX 0x2
#define RBX 0x3
#define RSP 0x4
#define RBP 0x5
#define RSI 0x6
#define RDI 0x7
#define R8  0x8
#define R9  0x9
#define R10 0xA
#define R11 0xB
#define R12 0xC
#define R13 0xD
#define R14 0xE
#define R15 0xF

enum Location : size_t {
  xmm0 , xmm1 , xmm2 , xmm3 ,
  xmm4 , xmm5 , xmm6 , xmm7 ,
  xmm8 , xmm9 , xmm10, xmm11,
  xmm12, xmm13, xmm14, xmm15,
  mem
};

typedef Location location_t;

struct GlobalVariable {
  const char *name;
  size_t offset;
  size_t size;
};
struct GlobalVariableTable {
  struct {
    size_t size;
    GlobalVariable *data;
  } doubles;
  struct {
    size_t size;
    GlobalVariable *data;
  } strings;
};

struct BlockVariable {
  const char *name;
  size_t usageCount;
  Location location;
  size_t offset;
};
struct BlockVariableTable {
  size_t size;
  size_t capacity;
  BlockVariable *data;
};

struct MultiBlocksVariable {
  const char *name;
  bool *useVar;
};
struct MultiBlocksVariableTable {
  size_t size;
  size_t capacity;
  MultiBlocksVariable *data;
};

struct JumpLabel {
  const char *name;
  size_t position;
};
struct JumpLabelTable {
  size_t size;
  size_t capacity;
  JumpLabel *data;
};

struct JumpReference {
  size_t position;
  size_t referencePosition;
  size_t delta;
  const char *referee;
};
struct JumpReferenceTable {
  size_t size;
  size_t capacity;
  JumpReference *data;
};

struct GlobalContext {
  GlobalVariableTable globalVarTable;
  JumpReferenceTable callRefTable;
  JumpLabelTable callLabelTable;
  Flashing flashing;
};
struct Context {
  size_t blocksCount;
  BlockVariableTable *varTables;
  size_t varsCount;
  bool inMain;
  MultiBlocksVariableTable multiVarTable;
  JumpReferenceTable jumpRefTable;
  JumpLabelTable jumpLabelTable;
  GlobalContext *globalContext;
};

static bool CreateContext(Context *context, size_t blocksCount, GlobalContext *globalContext);

static bool DestroyGlobalContext(GlobalContext *context);
static bool DestroyContext      (      Context *context);

static bool AddJumpLabel(Context *context, const char *name, size_t position);
static bool AddJumpReference(Context *context, size_t pos, size_t refPos, size_t delta, const char *label);
static bool UpdateJumpReferences(Context *context, X86Code *code);

static bool AddCallLabel(GlobalContext *context, const char *name, size_t position);
static bool AddCallReference(GlobalContext *context, size_t pos, size_t refPos, size_t delta, const char *label);
static bool UpdateCallReferences(GlobalContext *context, X86Code *code);

static void GenerateVariableTable(Context *context, const llvm::BasicBlock *block, size_t blockIndex);
static bool AddVariable(Context *context, const char *name, size_t blockIndex);

static location_t GetVariableLocation(Context *context, const char *name, size_t blockIndex);
static size_t     GetVariableOffset  (Context *context, const char *name, size_t blockIndex);
static size_t     GetVariableOffset  (Context *context, const char *name);
static size_t     GetGlobalOffset    (Context *context, const char *name);
static bool SearchVariable(Context *context, const char *name, location_t *location);