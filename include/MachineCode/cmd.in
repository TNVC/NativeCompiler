#include "DSL.in"

//DEF_CMD(name, code, executableCode)

DEF_CMD(HLT, 0, {
    EPILOG_DATA;
    Write(code, data, sizeof(data));
  })

DEF_CMD(PUSH, 1, {
    if (!cmd.mem && cmd.reg)
      {
        PUSH_REG_DATA;
        Write(code, &data[args.reg], sizeof(data[args.reg]));
      }
    else if (!cmd.mem && cmd.immed)
      {
        unsigned char data[] = { PUSH_IMMEDIATE_DATA };
        WRITE_CONSTANT(&data[1], args.data);
        Write(code, data, sizeof(data));
      }
    else if (cmd.reg)
      {
        PUSH_MEM_REG_OFFSET_DATA;
        WRITE_LONG_CONSTANT(&data[args.reg][4], (cmd.immed ? args.data*8 : 0));
        Write(code, data[args.reg], sizeof(data[args.reg]));
      }
    else
      {
        unsigned char data[] = { PUSH_MEM_OFFSET };
        WRITE_CONSTANT(&data[2],  RAM_START_ADDRESS - NEW_POS + args.data*8 - 6);
        Write(code, data, sizeof(data));
      }
  })

DEF_CMD(ADD, 2, {
    ARITHMETIC_DATA(ADD_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(SUB, 3, {
    ARITHMETIC_DATA(SUB_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(MUL, 4, {
    ARITHMETIC_DATA(MUL_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(DIV, 5, {
    ARITHMETIC_DATA(DIV_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(DUMP, 7, {
    unsigned char data[] = { NOP_DATA };
    Write(code, data, sizeof(data));
  })

DEF_CMD(COPY, 9, {
    unsigned char data[] =
        {
            0x4C, 0x8B, 0x3C, 0x24, // mov r15, [rsp]
            0x48, 0x85, 0x6F, // test rsi, rsi
            0x74, 0x07, // jmp .label
            0x4C, 0x8B, 0x74, 0x24, 0x08, // mov r14, [rsp + 0x8]
            0x41, 0x56, // push r14
            // .label:
            0x41, 0x57, // push r15
        };
    Write(code, data, sizeof(data));
  })

DEF_CMD(SWAP, 10, {
    unsigned char data[] =
        {
            0x41, 0x5F, // pop r15
            0x41, 0x5E, // pop r14
            0x48, 0x85, 0x6F, // test rsi, rsi
            0x74, 0x0E, // jmp .label
            0x41, 0x5D, // pop r13
            0x41, 0x5C, // pop r12
            0x41, 0x56, // push r14
            0x41, 0x57, // push r15
            0x41, 0x54, // push r12
            0x41, 0x53, // push r13
            0xEB, 0x04, // jmp .end
            // .label:
            0x41, 0x57, // push r15
            0x41, 0x56, // push r14
            // .end:
        };
    Write(code, data, sizeof(data));
  })

DEF_CMD(POP, 11, {
    if (!cmd.mem && cmd.reg)
      {
        POP_REG_DATA;
        Write(code, &data[args.reg], sizeof(data[args.reg]));
      }
    else if (cmd.reg)
      {
        POP_MEM_REG_OFFSET_DATA;
        WRITE_LONG_CONSTANT(&data[args.reg][4], (cmd.immed ? args.data*8 : 0));
        Write(code, data[args.reg], sizeof(data[args.reg]));
      }
    else
      {
        unsigned char data[] = { POP_MEM_OFFSET };
        WRITE_CONSTANT(&data[2],  RAM_START_ADDRESS - NEW_POS + args.data*8 - 6);
        Write(code, data, sizeof(data));
      }
  })

DEF_CMD(JMP, 12, {
    AddReference(&refTable, NEW_POS, NEW_POS + 1, args.data, -4);
    unsigned char data[] = { JMP_DATA };
    Write(code, data, sizeof(data));
  })

DEF_CMD(JB, 13, {
    AddReference(&refTable, NEW_POS + 78 , NEW_POS + 80 , args.data, -4);
    AddReference(&refTable, NEW_POS + 102, NEW_POS + 104, args.data, -4);
    JUMP_DATA(JB_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(JBE, 14, {
    AddReference(&refTable, NEW_POS + 78 , NEW_POS + 80 , args.data, -4);
    AddReference(&refTable, NEW_POS + 102, NEW_POS + 104, args.data, -4);
    JUMP_DATA(JBE_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(JA, 15, {
    AddReference(&refTable, NEW_POS + 78 , NEW_POS + 80 , args.data, -4);
    AddReference(&refTable, NEW_POS + 102, NEW_POS + 104, args.data, -4);
    JUMP_DATA(JA_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(JAE, 16, {
    AddReference(&refTable, NEW_POS + 78 , NEW_POS + 80 , args.data, -4);
    AddReference(&refTable, NEW_POS + 102, NEW_POS + 104, args.data, -4);
    JUMP_DATA(JAE_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(JE, 17, {
    AddReference(&refTable, NEW_POS + 78 , NEW_POS + 80 , args.data, -4);
    AddReference(&refTable, NEW_POS + 102, NEW_POS + 104, args.data, -4);
    JUMP_DATA(JE_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(JNE, 18, {
    AddReference(&refTable, NEW_POS + 78 , NEW_POS + 80 , args.data, -4);
    AddReference(&refTable, NEW_POS + 102, NEW_POS + 104, args.data, -4);
    JUMP_DATA(JNE_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(OUT, 6, {
    AddReference(&externalRefTable, NEW_POS + 73, NEW_POS + 74, (size_t) printf, -4);
    unsigned char data[] =
        {
            0x41, 0x5F, // pop r15
            0x41, 0x5E, // pop r14
            0x41, 0x52, // push r10
            0x50, // push rax
            0x53, // push rbx
            0x51, // push rcx
            0x52, // push rdx
            0x56, // push rsi
            0x57, // push rdi
            0x49, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xC3, 0x40, // movabs r13, 10000.0
            0xC4, 0xC1, 0xF9, 0x6E, 0xDD, // mov xmm3, r13
            0xC4, 0xC1, 0xF9, 0x6E, 0xC6, // vmovq xmm0, r14
            0xF2, 0x0F, 0x5E, 0xC3, // divsd xmm0, xmm3
            0xC4, 0xC1, 0xF9, 0x6E, 0xCF, // vmovq xmm1, r15
            0xF2, 0x0F, 0x58, 0xC1, // addsd xmm0, xmm1
            0xC4, 0xE1, 0xF9, 0x7E, 0xC6, // vmovq rsi, xmm0
            0x49, 0x89, 0xE7, // mov r15, rsp
            0x49, 0x83, 0xE7, 0x0F, // and r15, 0x0F
            0x45, 0x84, 0xFF, // test r15b, r15b
            0x75, 0x02, // jnz .Push
            0x6A, 0x00, // push 0x0
            // .Push:
            0x68, 0x25, 0x67, 0x00, 0x00, // push '%g\0'
            0x48, 0x8D, 0x3C, 0x24, // lea rdi, [rsp]
            0xE8, 0x00, 0x00, 0x00, 0x00, // call 0x0
            0x45, 0x84, 0xFF, // test r15b, r15b
            0x75, 0x04, // jnz .Push
            0x48, 0x83, 0xC4, 0x08, // add rsp, 0x8
            // .Pop:
            0x48, 0x83, 0xC4, 0x08, // add rsp, 0x8
            0x5F, // pop rdi
            0x5E, // pop rsi
            0x5A, // pop rdx
            0x59, // pop rcx
            0x5B, // pop rbx
            0x58, // pop rax
            0x41, 0x5A, // pop r10
          };
    Write(code, data, sizeof(data));
})

DEF_CMD(IN, 8, {
    AddReference(&externalRefTable, NEW_POS + 39, NEW_POS + 40, (size_t) scanf, -4);
    unsigned char data[] =
        {
            0x41, 0x52, // push r10
            0x50, // push rax
            0x53, // push rbx
            0x51, // push rcx
            0x52, // push rdx
            0x56, // push rsi
            0x57, // push rdi
            0x49, 0x89, 0xE7, // mov r15, rsp
            0x49, 0x83, 0xE7, 0x0F, // and r15, 0x0F
            0x45, 0x84, 0xFF, // test r15b, r15b
            0x75, 0x02, // jnz .Push
            0x6A, 0x00, // push 0x0
            // .Push:
            0x68, 0x25, 0x67, 0x00, 0x00, // push '%g\0'
            0x48, 0x8D, 0x3C, 0x24, // lea rdi, [rsp]
            0x6A, 0x00, // push 0x0
            0x6A, 0x00, // push 0x0
            0x48, 0x8D, 0x34, 0x24, // lea rsi, [rsp]
            0xE8, 0x00, 0x00, 0x00, 0x00, // call 0x0
            0x48, 0x8B, 0x04, 0x24, // mov rax, [rsp]
            0xC4, 0xE1, 0xF9, 0x6E, 0xC0, // vmovq xmm0, rax
            0x48, 0x83, 0xC4, 0x10, // add rsp, 0x10
            0x45, 0x84, 0xFF, // test r15b, r15b
            0x75, 0x04, // jnz .Push
            0x48, 0x83, 0xC4, 0x08, // add rsp, 0x8
            // .Pop:
            0x48, 0x83, 0xC4, 0x08, // add rsp, 0x8
            0x5F, // pop rdi
            0x5E, // pop rsi
            0x5A, // pop rdx
            0x59, // pop rcx
            0x5B, // pop rbx
            0x58, // pop rax
            0x41, 0x5A, // pop r10
            0x49, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xC3, 0x40, // movabs r13, 10000.0
            0xC4, 0xC1, 0xF9, 0x6E, 0xDD, // mov xmm3, r13
            0xF2, 0x4C, 0x0F, 0x2C, 0xF8, // cvttsd2si r15, xmm0
            0xF2, 0x49, 0x0F, 0x2A, 0xCF, // cvtsi2sd xmm1, r15
            0xF2, 0x0F, 0x5C, 0xC1, // subsd xmm0, xmm1
            0xF2, 0x0F, 0x59, 0xC3, // mulsd xmm0, xmm3
            0xF2, 0x4C, 0x0F, 0x2C, 0xF0, // cvttsd2si r14, xmm0
            0x41, 0x56, // push r14
            0x41, 0x57, // push r15
        };
    Write(code, data, sizeof(data));
  })

DEF_CMD(SHOW, 23, {
    AddReference(&externalRefTable, NEW_POS + 22, NEW_POS + 23, (size_t) putchar, -4);
    unsigned char data[] =
        {
            0x41, 0x52, // push r10
            0x50, // push rax
            0x53, // push rbx
            0x51, // push rcx
            0x52, // push rdx
            0x56, // push rsi
            0x57, // push rdi
            0x4D, 0x89, 0xD5, // mov r13, r10
            // .Start:
            0x31, 0xFF, // xor edi, edi
            0x41, 0x8A, 0x7D, 0x00, // mov dil, [r13]
            0x40, 0x84, 0xFF, // test dil, dil
            0x74, 0x0B, // jz .End
            0xE8, 0x00, 0x00, 0x00, 0x00, // call 0x0
            0x49, 0x83, 0xC5, 0x08, // add r13, 0x8
            0xEB, 0xEA, // jmp .Start
            0x5F, // pop rdi
            0x5E, // pop rsi
            0x5A, // pop rdx
            0x59, // pop rcx
            0x5B, // pop rbx
            0x58, // pop rax
            0x41, 0x5A, // pop r10
        };
    Write(code, data, sizeof(data));
  })

DEF_CMD(SIN, 19, {
    AddReference(&externalRefTable, NEW_POS + 43, NEW_POS + 44, (size_t) sin, -4);
    LIBRARY_CALL_DATA;
    Write(code, data, sizeof(data));
  })

DEF_CMD(COS, 20, {
    AddReference(&externalRefTable, NEW_POS + 43, NEW_POS + 44, (size_t) cos, -4);
    LIBRARY_CALL_DATA;
    Write(code, data, sizeof(data));
  })

DEF_CMD(SQRT, 22, {
    AddReference(&externalRefTable, NEW_POS + 43, NEW_POS + 44, (size_t) sqrt, -4);
    LIBRARY_CALL_DATA;
    Write(code, data, sizeof(data));
  })

DEF_CMD(TAN, 31, {
    AddReference(&externalRefTable, NEW_POS + 43, NEW_POS + 44, (size_t) tan, -4);
    LIBRARY_CALL_DATA;
    Write(code, data, sizeof(data));
  })

DEF_CMD(POW, 21, {
    AddReference(&externalRefTable, NEW_POS + 65, NEW_POS + 66, (size_t) pow, -4);
    unsigned char data[] =
        {
          0x41, 0x5F, //pop r15
          0x41, 0x5E, //pop r14
          0x49, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xC3, 0x40, // movabs r13, 10000.0
          0xC4, 0xC1, 0xF9, 0x6E, 0xDD, // vmovq xmm3, r13
          0x41, 0x5D, //pop r13
          0x41, 0x5C, //pop r12
          0x50, // push rax
          0x53, // push rbx
          0x51, // push rcx
          0x52, // push rdx
          0x56, // push rsi
          0x57, // push rdi
          0xF2, 0x49, 0x0F, 0x2A, 0xCE, // cvtsi2sd xmm1, r14
          0xF2, 0x0F, 0x5E, 0xCB, // divsd xmm1, xmm3
          0xF2, 0x49, 0x0F, 0x2A, 0xC7, // cvtsi2sd xmm0, r15
          0xF2, 0x0F, 0x58, 0xC8, // addsd xmm1, xmm0
          0xF2, 0x49, 0x0F, 0x2A, 0xC4, // cvtsi2sd xmm0, r12
          0xF2, 0x0F, 0x5E, 0xC3, // divsd xmm0, xmm3
          0xF2, 0x49, 0x0F, 0x2A, 0xD5, // cvtsi2sd xmm2, r13
          0xF2, 0x0F, 0x58, 0xC2, // adds xmm0, xmm2
          0xE8, 0x00, 0x00, 0x00, 0x00, // call 0x0
          0x5F, // pop rdi
          0x5E, // pop rsi
          0x5A, // pop rdx
          0x59, // pop rcx
          0x5B, // pop rbx
          0x58, // pop rax
          0x49, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xC3, 0x40, // movabs r13, 10000.0
          0xC4, 0xC1, 0xF9, 0x6E, 0xDD, // vmovq xmm3, r13
          0xF2, 0x4C, 0x0F, 0x2C, 0xF8, // cvttsd2si r15, xmm0
          0xF2, 0x49, 0x0F, 0x2A, 0xCF, // cvtsi2sd xmm1, r15
          0xF2, 0x0F, 0x5C, 0xC1, // subsd xmm0, xmm1
          0xF2, 0x0F, 0x59, 0xC3, // mulsd xmm0, xmm3
          0xF2, 0x4C, 0x0F, 0x2C, 0xF0, // cvttsd2si r14, xmm0
          0x41, 0x56, // push r14
          0x41, 0x57, // push r15
        };
    Write(code, data, sizeof(data));
  })

DEF_CMD(RET, 24, {
    unsigned char data[] = { RET_DATA };
    Write(code, data, sizeof(data));
  })

DEF_CMD(CALL, 25, {
    AddReference(&refTable, NEW_POS, NEW_POS + 1, args.data, -4);
    unsigned char data[] = { CALL_DATA };
    Write(code, data, sizeof(data));
  })

DEF_CMD(LESS, 26, {
    COMPARE_DATA(LT_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(GREATER, 27, {
    COMPARE_DATA(GT_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(EQL, 28, {
    COMPARE_DATA(EQ_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(NEQL, 29, {
    COMPARE_DATA(NEQ_DATA);
    Write(code, data, sizeof(data));
  })

DEF_CMD(AND, 30, {
    LOGIC_DATA(AND_DATA);
    Write(code, data, sizeof(data));
  })

/*DEF_CMD(OR, 31, {
    LOGIC_DATA(OR_DATA);
    Write(code, data, sizeof(data));
  })*/

#undef DEF_CMD